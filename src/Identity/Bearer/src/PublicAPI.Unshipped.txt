#nullable enable
const Microsoft.AspNetCore.Identity.JWEAlg.RSA_OAEP = "RSA-OAEP" -> string!
const Microsoft.AspNetCore.Identity.JWSAlg.HS256 = "HS256" -> string!
const Microsoft.AspNetCore.Identity.JWSAlg.None = "none" -> string!
const Microsoft.AspNetCore.Identity.JWSAlg.RS256 = "RS256" -> string!
Microsoft.AspNetCore.Identity.BearerSchemeOptions
Microsoft.AspNetCore.Identity.BearerSchemeOptions.BearerSchemeOptions() -> void
Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions
Microsoft.AspNetCore.Identity.IAccessTokenDenyPolicy
Microsoft.AspNetCore.Identity.IAccessTokenDenyPolicy.IsDeniedAsync(string! tokenId) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserTokenService<TUser>
Microsoft.AspNetCore.Identity.IUserTokenService<TUser>.GetAccessTokenAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.IUserTokenService<TUser>.GetRefreshTokenAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.IUserTokenService<TUser>.ReadAccessTokenAsync(string! accessToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.TokenInfo?>!
Microsoft.AspNetCore.Identity.IUserTokenService<TUser>.RefreshTokensAsync(string! refreshToken) -> System.Threading.Tasks.Task<(string?, string?)>!
Microsoft.AspNetCore.Identity.IUserTokenService<TUser>.RevokeRefreshAsync(TUser! user, string! token) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.JsonWebKey
Microsoft.AspNetCore.Identity.JsonWebKey.AdditionalData.get -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Identity.JsonWebKey.Alg.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Alg.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.JsonWebKey(string! kty) -> void
Microsoft.AspNetCore.Identity.JsonWebKey.KeyOps.get -> System.Collections.Generic.IList<string!>?
Microsoft.AspNetCore.Identity.JsonWebKey.KeyOps.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Kid.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Kid.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Kty.get -> string!
Microsoft.AspNetCore.Identity.JsonWebKey.Kty.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.Use.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.Use.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5c.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5c.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5t.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5t.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5tS256.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5tS256.set -> void
Microsoft.AspNetCore.Identity.JsonWebKey.X5u.get -> string?
Microsoft.AspNetCore.Identity.JsonWebKey.X5u.set -> void
Microsoft.AspNetCore.Identity.JtiBlocker
Microsoft.AspNetCore.Identity.JtiBlocker.IsDeniedAsync(string! tokenId) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.JtiBlocker.JtiBlocker(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.JtiBlockerOptions!>! options) -> void
Microsoft.AspNetCore.Identity.JtiBlockerOptions
Microsoft.AspNetCore.Identity.JtiBlockerOptions.BlockedJti.get -> System.Collections.Generic.HashSet<string!>!
Microsoft.AspNetCore.Identity.JtiBlockerOptions.JtiBlockerOptions() -> void
Microsoft.AspNetCore.Identity.JWEAlg
Microsoft.AspNetCore.Identity.JWSAlg
Microsoft.AspNetCore.Identity.JwtBuilder
Microsoft.AspNetCore.Identity.JwtBuilder.Algorithm.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Algorithm.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Audience.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Audience.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.CreateJwtAsync() -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.JwtBuilder.IssuedAt.get -> System.DateTimeOffset?
Microsoft.AspNetCore.Identity.JwtBuilder.IssuedAt.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Issuer.get -> string!
Microsoft.AspNetCore.Identity.JwtBuilder.Issuer.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.Jti.get -> string?
Microsoft.AspNetCore.Identity.JwtBuilder.Jti.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.JwtBuilder(string! algorithm, string! issuer, Microsoft.AspNetCore.Identity.JsonWebKey? signingKey, string! audience, string! subject, System.Collections.Generic.IDictionary<string!, string!>! payload, System.DateTimeOffset notBefore, System.DateTimeOffset expires) -> void
Microsoft.AspNetCore.Identity.JwtBuilder.NotBefore.get -> System.DateTimeOffset
Microsoft.AspNetCore.Identity.JwtBuilder.NotBefore.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.PayloadProtector.get -> Microsoft.AspNetCore.DataProtection.IDataProtector?
Microsoft.AspNetCore.Identity.JwtBuilder.PayloadProtector.set -> void
Microsoft.AspNetCore.Identity.JwtBuilder.SigningKey.get -> Microsoft.AspNetCore.Identity.JsonWebKey?
Microsoft.AspNetCore.Identity.JwtBuilder.SigningKey.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TToken>
Microsoft.AspNetCore.Identity.TokenManager<TToken>.Dispose() -> void
Microsoft.AspNetCore.Identity.TokenManager<TToken>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.TokenManager<TToken>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TToken>.Options.get -> Microsoft.AspNetCore.Identity.TokenManagerOptions!
Microsoft.AspNetCore.Identity.TokenManager<TToken>.Options.set -> void
Microsoft.AspNetCore.Identity.TokenManager<TToken>.Store.get -> Microsoft.AspNetCore.Identity.ITokenStore<TToken!>!
Microsoft.AspNetCore.Identity.TokenManager<TToken>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.TokenManager<TToken>.TokenManager(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityOptions!>! identityOptions, Microsoft.AspNetCore.Identity.ITokenStore<TToken!>! store, Microsoft.AspNetCore.Identity.IdentityErrorDescriber! errors, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.TokenManager<TToken!>!>! logger) -> void
Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddBearerServerAuthentication(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddDefaultIdentityBearer<TUser, TToken>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Identity.IdentityOptions!>! setupAction) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddDefaultIdentityBearer<TUser>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.AspNetCore.Identity.BearerServiceCollectionExtensions.AddIdentityCore<TUser, TToken>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Identity.IdentityOptions!>! setupAction) -> Microsoft.AspNetCore.Identity.IdentityBearerTokenBuilder!
static Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions.AddBearerTokens<TToken>(this Microsoft.AspNetCore.Identity.IdentityBuilder! builder) -> Microsoft.AspNetCore.Identity.IdentityBearerTokenBuilder!
static Microsoft.Extensions.DependencyInjection.BearerBuilderExtensions.AddTokenStore<TContext>(this Microsoft.AspNetCore.Identity.IdentityBuilder! builder) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.CancellationToken.get -> System.Threading.CancellationToken
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.CheckTokenStatus(string! status) -> bool
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.Dispose(bool disposing) -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.FindAsync(Microsoft.AspNetCore.Identity.TokenInfoFilter! filter) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.FindByIdAsync<TPayload>(string! tokenId) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.TokenInfo?>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.Logger.set -> void
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.PurgeExpiredTokensAsync() -> System.Threading.Tasks.Task<int>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.RevokeAsync(string! tokenId) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.TokenManager<TToken>.StoreAsync(Microsoft.AspNetCore.Identity.TokenInfo! info) -> System.Threading.Tasks.Task<TToken!>!
